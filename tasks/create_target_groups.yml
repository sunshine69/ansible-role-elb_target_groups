- name: find target group VPC
  ec2_vpc_net_info:
    region: "{{ region }}"
    profile: "{{ profile | default(omit) }}"
    filters:
      tag:Name: "xvt-{{ vpc_name }}"
  register: vpc_facts

- name: create target groups
  elb_target_group:
    region: "{{ region }}"
    profile: "{{ profile | default(omit) }}"
    name: "{{ item.value.name }}"
    state: present
    protocol: "{{ item.value.protocol|default(loadbalancer_target_group_protocol) }}"
    port: "{{ item.value.port|default(loadbalancer_target_group_port) }}"
    modify_targets: "{{ item.value.modify_targets | default(loadbalancer_target_group_modify_targets|default('yes')) }}"
    stickiness_enabled: "{{ item.value.stickiness_enabled | default(loadbalancer_target_group_stickiness_enabled|default('no')) }}"
    stickiness_lb_cookie_duration: "{{ item.value.stickiness_lb_cookie_duration|default(loadbalancer_target_group_stickiness_lb_cookie_duration|default(86400)) }}"
    vpc_id: "{{ vpc_facts.vpcs[0].id }}"
    health_check_protocol: "{{ item.value.health_check_protocol|default(loadbalancer_health_check.protocol) }}"
    health_check_port: "{{ item.value.health_check_port|default(loadbalancer_health_check.port|default(omit)) }}"
    health_check_path: "{{ item.value.health_check_path|default(loadbalancer_health_check.path) }}"
    health_check_timeout: "{{ item.value.health_check_timeout|default(loadbalancer_health_check.response_timeout) }}"
    health_check_interval: "{{ item.value.health_check_interval|default(loadbalancer_health_check.interval) }}"
    unhealthy_threshold_count: "{{ item.value.unhealthy_threshold_count|default(loadbalancer_health_check.unhealthy_threshold) }}"
    healthy_threshold_count: "{{ item.value.healthy_threshold_count|default(loadbalancer_health_check.healthy_threshold) }}"
    successful_response_codes: "{{ item.value.successful_response_codes|default(loadbalancer_health_check.successful_response_codes|default(omit)) }}"
    deregistration_delay_timeout: "{{ item.value.deregistration_delay_timeout|default(loadbalancer_target_group_connection_draining|default(omit)) }}"
    tags:
      Application: "{{ role_type }}"
      Environment: "{{ env }}"
      Tier: "load_balancer"
      Target: "{{ item.key }}"
      Protocol: "{{ item.value.protocol|default(loadbalancer_target_group_protocol) }}"
  with_dict: "{{ target_groups }}"
